{"version":3,"sources":["redux/actions.js","components/MemeGenerator.js","Trollface.png","components/Header.js","App.js","reportWebVitals.js","redux/reducers.js","index.js"],"names":["FETCH_MEMES","TOP_TEXT","BOTTOM_TEXT","MemeGenerator","randomImage","e","preventDefault","allMemeImgs","props","randomNumber","Math","floor","random","length","setState","randomImg","url","console","log","state","this","fetchMemes","createTopText","createBottomText","topText","bottomText","className","type","onClick","id","placeholder","onChange","src","alt","React","Component","connect","fetchReducer","memeReducer","dispatch","fetch","then","res","json","data","memes","payload","catch","value","target","Header","Trollface","style","width","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e72d10a9.chunk.js","sourcesContent":["export const FETCH_MEMES = \"FETCH_MEMES\";\r\nexport const TOP_TEXT = \"TOP_TEXT\";\r\nexport const BOTTOM_TEXT = \"BOTTOM_TEXT\";\r\n\r\nexport const fetchMemes = () => (dispatch) => {\r\n  fetch(`https://api.imgflip.com/get_memes`)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      console.log(data.data.memes);\r\n      dispatch({ type: FETCH_MEMES, payload: data.data.memes });\r\n    })\r\n    .catch((e) => {\r\n      console.log(\"error\", e);\r\n    });\r\n};\r\nexport const createTopText = (value) => {\r\n  return {\r\n    type: TOP_TEXT,\r\n    payload: value,\r\n  };\r\n};\r\nexport const createBottomText = (value) => {\r\n  return {\r\n    type: BOTTOM_TEXT,\r\n    payload: value,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchMemes, createTopText, createBottomText } from \"../redux/actions\";\r\n\r\nclass MemeGenerator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      randomImg: \"https://i.imgflip.com/4t0m5.jpg\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchMemes();\r\n  }\r\n  randomImage = (e) => {\r\n    e.preventDefault();\r\n    const { allMemeImgs } = this.props;\r\n    let randomNumber = Math.floor(Math.random() * (allMemeImgs.length - 1));\r\n    this.setState({ randomImg: allMemeImgs[randomNumber].url });\r\n    console.log(this.state.randomImg);\r\n  };\r\n  render() {\r\n    console.log(this.props.allMemeImgs);\r\n    const { createTopText, createBottomText, topText, bottomText } = this.props;\r\n    return (\r\n      <div className=\"meme\">\r\n        <form className=\"meme-form\">\r\n          <button type=\"click\" onClick={this.randomImage}>\r\n            GEN\r\n          </button>\r\n          <input\r\n            id=\"topText\"\r\n            placeholder=\"Top Text\"\r\n            type=\"text\"\r\n            onChange={createTopText}\r\n          />\r\n          <input\r\n            id=\"bottomText\"\r\n            placeholder=\"Bottom Text\"\r\n            type=\"text\"\r\n            onChange={createBottomText}\r\n          />\r\n        </form>\r\n        <div className=\"container\">\r\n          <h2 className=\"top\">{topText}</h2>\r\n          <img src={this.state.randomImg} alt=\"meme\" className=\"memeImg\" />\r\n          <h2 className=\"bottom\">{bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    allMemeImgs: state.fetchReducer.allMemeImgs,\r\n    topText: state.memeReducer.topText,\r\n    bottomText: state.memeReducer.bottomText,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchMemes: () => dispatch(fetchMemes()),\r\n    createTopText: (e) => dispatch(createTopText(e.target.value)),\r\n    createBottomText: (e) => dispatch(createBottomText(e.target.value)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeGenerator);\r\n","export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import Trollface from \"../Trollface.png\";\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <img src={Trollface} alt=\"troll face\" style={{ width: \"50px\" }} />\r\n      <p>Meme Generator</p>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import MemeGenerator from \"./components/MemeGenerator\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FETCH_MEMES, TOP_TEXT, BOTTOM_TEXT } from \"./actions\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initState = {\r\n  allMemeImgs: [],\r\n  topText: \"Top Text\",\r\n  bottomText: \"Bottom Text\",\r\n};\r\n\r\nexport const fetchReducer = (state = initState, action = {}) => {\r\n  switch (action.type) {\r\n    case FETCH_MEMES:\r\n      return { ...state, allMemeImgs: action.payload };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const memeReducer = (state = initState, action = {}) => {\r\n  switch (action.type) {\r\n    case TOP_TEXT:\r\n      return { ...state, topText: action.payload };\r\n    case BOTTOM_TEXT:\r\n      return { ...state, bottomText: action.payload };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\nexport const reducer = combineReducers({\r\n  fetchReducer,\r\n  memeReducer,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { reducer } from \"./redux/reducers\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}